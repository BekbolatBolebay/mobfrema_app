// –ë—ñ—Ä–Ω–µ—à–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–≥–µ –±—ñ—Ä —É–∞“õ—ã—Ç—Ç–∞ –∂“Ø–∫—Ç–µ—É

import { CloudflareR2Service } from "./cloudflare-r2-service"
import { BackblazeB2Service } from "./backblaze-b2-service"
import { GoogleDriveService } from "./google-drive-service"
import { MegaService } from "./mega-service"
import { SupabaseService } from "./supabase-service"
import { SmartStorageRouter } from "./smart-storage-router"
import { freeStorageProviders } from "./free-storage-providers"
import type { File } from "./file"
import type { UploadResult } from "./upload-result"

export class MultiProviderUploader {
  private providers = {
    cloudflareR2: new CloudflareR2Service(),
    backblazeB2: new BackblazeB2Service(),
    googleDrive: new GoogleDriveService(),
    mega: new MegaService(),
    supabase: new SupabaseService(),
  }

  // –§–∞–π–ª–¥—ã –µ“£ –∂–∞“õ—Å—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–≥–µ –∂“Ø–∫—Ç–µ—É
  async uploadFile(file: File): Promise<UploadResult> {
    const provider = SmartStorageRouter.selectProvider(file.size, file.type)

    console.log(`üìÅ ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB) ‚Üí ${provider.name}`)

    try {
      switch (provider.name) {
        case "Cloudflare R2":
          return await this.providers.cloudflareR2.upload(file)
        case "Backblaze B2":
          return await this.providers.backblazeB2.upload(file)
        case "Google Drive API":
          return await this.providers.googleDrive.upload(file)
        case "MEGA API":
          return await this.providers.mega.upload(file)
        case "Supabase Storage":
          return await this.providers.supabase.upload(file)
        default:
          throw new Error("–ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã")
      }
    } catch (error) {
      // –ï–≥–µ—Ä –±—ñ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∂“±–º—ã—Å —ñ—Å—Ç–µ–º–µ—Å–µ, –±–∞—Å“õ–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω—É
      console.warn(`${provider.name} —Å”ô—Ç—Å—ñ–∑, —Ä–µ–∑–µ—Ä–≤—Ç—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–¥—ñ “õ–æ–ª–¥–∞–Ω–∞–º—ã–∑...`)
      return await this.uploadToFallback(file)
    }
  }

  // –†–µ–∑–µ—Ä–≤—Ç—ñ –∂“Ø–∫—Ç–µ—É
  private async uploadToFallback(file: File): Promise<UploadResult> {
    const fallbackOrder = ["Cloudflare R2", "Backblaze B2", "Google Drive API", "Supabase Storage"]

    for (const providerName of fallbackOrder) {
      try {
        const provider = freeStorageProviders.find((p) => p.name === providerName)!
        const fileSizeMB = file.size / (1024 * 1024)

        if (fileSizeMB <= provider.maxFileSize) {
          console.log(`üîÑ –†–µ–∑–µ—Ä–≤—Ç—ñ –∂“Ø–∫—Ç–µ—É: ${providerName}`)

          switch (providerName) {
            case "Cloudflare R2":
              return await this.providers.cloudflareR2.upload(file)
            case "Backblaze B2":
              return await this.providers.backblazeB2.upload(file)
            case "Google Drive API":
              return await this.providers.googleDrive.upload(file)
            case "Supabase Storage":
              return await this.providers.supabase.upload(file)
          }
        }
      } catch (error) {
        console.warn(`${providerName} –¥–∞ —Å”ô—Ç—Å—ñ–∑`)
        continue
      }
    }

    throw new Error("–ë–∞—Ä–ª—ã“õ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–ª–µ—Ä —Å”ô—Ç—Å—ñ–∑")
  }

  // –§–∞–π–ª–¥—ã –±—ñ—Ä–Ω–µ—à–µ –∂–µ—Ä–≥–µ –±—ç–∫–∞–ø –∂–∞—Å–∞—É (–º–∞“£—ã–∑–¥—ã —Ñ–∞–π–ª–¥–∞—Ä “Ø—à—ñ–Ω)
  async uploadWithBackup(file: File): Promise<UploadResult[]> {
    const primaryProvider = SmartStorageRouter.selectProvider(file.size, file.type)
    const backupProviders = freeStorageProviders
      .filter((p) => p.name !== primaryProvider.name && file.size / 1024 / 1024 <= p.maxFileSize)
      .slice(0, 2) // 2 —Ä–µ–∑–µ—Ä–≤—Ç—ñ –∫”©—à—ñ—Ä–º–µ

    const results: UploadResult[] = []

    // –ù–µ–≥—ñ–∑–≥—ñ –∂“Ø–∫—Ç–µ—É
    try {
      const primaryResult = await this.uploadFile(file)
      results.push(primaryResult)
    } catch (error) {
      console.error("–ù–µ–≥—ñ–∑–≥—ñ –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑:", error)
    }

    // –†–µ–∑–µ—Ä–≤—Ç—ñ –∂“Ø–∫—Ç–µ—É–ª–µ—Ä
    for (const backupProvider of backupProviders) {
      try {
        const backupResult = await this.uploadToProvider(file, backupProvider.name)
        results.push(backupResult)
      } catch (error) {
        console.warn(`–†–µ–∑–µ—Ä–≤—Ç—ñ –∂“Ø–∫—Ç–µ—É —Å”ô—Ç—Å—ñ–∑ (${backupProvider.name}):`, error)
      }
    }

    return results
  }

  private async uploadToProvider(file: File, providerName: string): Promise<UploadResult> {
    switch (providerName) {
      case "Cloudflare R2":
        return await this.providers.cloudflareR2.upload(file)
      case "Backblaze B2":
        return await this.providers.backblazeB2.upload(file)
      case "Google Drive API":
        return await this.providers.googleDrive.upload(file)
      case "MEGA API":
        return await this.providers.mega.upload(file)
      case "Supabase Storage":
        return await this.providers.supabase.upload(file)
      default:
        throw new Error("–ë–µ–ª–≥—ñ—Å—ñ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
    }
  }
}
